/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as PrivateDashboardIndexRouteImport } from './routes/_private/dashboard/index'
import { Route as PublicAuthSingInRouteImport } from './routes/_public/auth/sing-in'

const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/_public/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateDashboardIndexRoute = PrivateDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PublicAuthSingInRoute = PublicAuthSingInRouteImport.update({
  id: '/_public/auth/sing-in',
  path: '/auth/sing-in',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof PublicIndexRoute
  '/auth/sing-in': typeof PublicAuthSingInRoute
  '/dashboard': typeof PrivateDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof PublicIndexRoute
  '/auth/sing-in': typeof PublicAuthSingInRoute
  '/dashboard': typeof PrivateDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_public/': typeof PublicIndexRoute
  '/_public/auth/sing-in': typeof PublicAuthSingInRoute
  '/_private/dashboard/': typeof PrivateDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/sing-in' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/sing-in' | '/dashboard'
  id:
    | '__root__'
    | '/_private'
    | '/_public/'
    | '/_public/auth/sing-in'
    | '/_private/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  PublicIndexRoute: typeof PublicIndexRoute
  PublicAuthSingInRoute: typeof PublicAuthSingInRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/dashboard/': {
      id: '/_private/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PrivateDashboardIndexRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_public/auth/sing-in': {
      id: '/_public/auth/sing-in'
      path: '/auth/sing-in'
      fullPath: '/auth/sing-in'
      preLoaderRoute: typeof PublicAuthSingInRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface PrivateRouteRouteChildren {
  PrivateDashboardIndexRoute: typeof PrivateDashboardIndexRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateDashboardIndexRoute: PrivateDashboardIndexRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  PublicIndexRoute: PublicIndexRoute,
  PublicAuthSingInRoute: PublicAuthSingInRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
